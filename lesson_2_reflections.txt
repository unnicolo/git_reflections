**Udacity course - How to use Git and Github**

**Lesson 2 reflections**

Question: What happens when you initialize a repository?
Why do you need to do it?

When you initialize a repository with `git init' git will add a hidden folder
named `.git' to the directory that now becomes a repository. This folder
contains all the files that are needed to maintain the commit history.

We need this so that we can keep track of the commit history. Otherwise it
would be just a folder with some files in it. Git has to know that the its
operations are supported.

Question: How is the staging are different from the working directory and
repository? What value do you think it offers?

The staging area is the intermediate area between untracked files and tracked
files. Its purpose is to have fine-grained control of which files will be
present in a specific commit and which not. This allows to keep the changes
of a commit logically seperate from other commits. 

This concept offers great value because the user won't have to move files
just to exclude/include them from/to a commit. Also, it encourages the user to
think about how to structure the commit.

How can you use the staging area to make sure you have one commit
per logical change?

You can put all the files that are needed for the logical change into the
staging area and then commit. For the next logical change just include the filesthat are necessary for the next commit.

Question: What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

For example when you try to try out experimental features for your software.
Branches help because each branch can be developed seperately without affecting
the master branch or other branches. Even if some branches lead to a fatal 
error in the program it doesn't affect the master branch.

Question: How do the diagrams help you visualize the branch structure?

The diagrams clarify on which branches each commit resides, which commits are
reachable from which branch and it helps to think about how to organize the
project. With this diagram you can see at a glance how the commit history is
structured.

Question: What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

When two branches are merged together we they both merge to a single one.
A new commit is created that has the merged content of the last commits of each
branch and from this commit every commit in the two branches is reachable.

We represent it in the diagram as seen because the branch that is currently
checked out remains the main branche that the other branches are being merged
into.


